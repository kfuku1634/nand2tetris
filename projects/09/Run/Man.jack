class Man {
   field int x, y; // screen location of the man's top-left corner 16*16.
   field int location;
   field int x_min, x_max;
   field int memAddress;
   field boolean before_action_is_jump;
   field int y1;

   constructor Man new() {
      let x_min = 100;
      let x_max = 239;
      let x = x_max;
      let y1 = 480;
      let y = y1/16;
      do draw();
      return this;
   }

   /** Disposes this man. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the man on the screen. */
   method void draw() {
      let location = x*32 + y;
	  let memAddress = 16384+location;
      do Memory.poke(memAddress+0, 2016);
	  do Memory.poke(memAddress+32, 2016);
	  do Memory.poke(memAddress+64, 2016);
	  do Memory.poke(memAddress+96, 2016);
	  do Memory.poke(memAddress+128, 384);
	  do Memory.poke(memAddress+160, 384);
	  do Memory.poke(memAddress+192, 2016);
	  do Memory.poke(memAddress+224, 3576);
	  do Memory.poke(memAddress+256, 14732);
	  do Memory.poke(memAddress+288, 390);
	  do Memory.poke(memAddress+320, 960);
	  do Memory.poke(memAddress+352, 1632);
	  do Memory.poke(memAddress+384, 2096);
	  do Memory.poke(memAddress+416, 4120);
	  do Memory.poke(memAddress+448, 24590);
	  do Memory.poke(memAddress+480, -16381);
	  return;
   }

   /** Erases the man on the screen. */
   method void erase() {
      let location = x*32 + y;
	  let memAddress = 16384+location;
      do Memory.poke(memAddress+0,   0);
	  do Memory.poke(memAddress+32,  0);
	  do Memory.poke(memAddress+64,  0);
	  do Memory.poke(memAddress+96,  0);
	  do Memory.poke(memAddress+128, 0);
	  do Memory.poke(memAddress+160, 0);
	  do Memory.poke(memAddress+192, 0);
	  do Memory.poke(memAddress+224, 0);
	  do Memory.poke(memAddress+256, 0);
	  do Memory.poke(memAddress+288, 0);
	  do Memory.poke(memAddress+320, 0);
	  do Memory.poke(memAddress+352, 0);
	  do Memory.poke(memAddress+384, 0);
	  do Memory.poke(memAddress+416, 0);
	  do Memory.poke(memAddress+448, 0);
	  do Memory.poke(memAddress+480, 0);
	  return;
   }

   /** Jump the man. */
   method void Jump() {
       do erase();
       if ( x < x_min ) {
               let  x = x_min;
               let before_action_is_jump = false;
           }
       else{
               let x = x-1;
               let before_action_is_jump = true;
               }
       do draw();
      return;
   }

   /** Fall the man. */
   method void Fall() {
       do erase();
       let x = x+1;
       if ( x_max < x ) {
            let  x = x_max;
           }
       let before_action_is_jump = false;
       do draw();
      return;
   }

   method boolean can_jump(){
       if ( ( x = x_max ) | ( before_action_is_jump ) ){
               return true;
           }
        return false;
       }

   method int get_foot_pos(){
       return x;
       }
   method int get_ground_pos(){
       return y1;
       }
}
